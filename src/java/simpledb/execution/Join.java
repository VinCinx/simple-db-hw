package simpledb.execution;

import simpledb.common.Type;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private final JoinPredicate joinPredicate;

    private OpIterator child1;
    private OpIterator child2;

    private List<Tuple> tupleList=new ArrayList<>();
    private Iterator<Tuple> it;

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.joinPredicate=p;
        this.child1=child1;
        this.child2=child2;
    }

    public JoinPredicate getJoinPredicate() {
        return this.joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        TupleDesc tupleDesc=child1.getTupleDesc();
        int fieldId = this.joinPredicate.getField1();
        return tupleDesc.getFieldName(fieldId);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        TupleDesc tupleDesc=child2.getTupleDesc();
        int fieldId = this.joinPredicate.getField2();
        return tupleDesc.getFieldName(fieldId);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        TupleDesc child1TupleDesc = this.child1.getTupleDesc();
        TupleDesc child2tupleDesc = this.child2.getTupleDesc();
        Type[] typeAr = new Type[child1TupleDesc.numFields()+child2tupleDesc.numFields()];
        String[] fieldAr = new String[child1TupleDesc.numFields()+child2tupleDesc.numFields()];
        int pos=0;
        for (int i = 0; i < child1TupleDesc.numFields(); i++) {
            typeAr[pos]=child1TupleDesc.getFieldType(i);
            fieldAr[pos]=child1TupleDesc.getFieldName(i);
            pos++;
        }
        for (int i = 0; i < child2tupleDesc.numFields(); i++) {
            typeAr[pos]=child2tupleDesc.getFieldType(i);
            fieldAr[pos]=child2tupleDesc.getFieldName(i);
            pos++;
        }
        TupleDesc res = new TupleDesc(typeAr, fieldAr);
        return res;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        this.child1.open();
        this.child2.open();
        this.it=this.tupleList.iterator();
        super.open();
    }

    public void close() {
        super.close();
        this.it=null;
        this.child2.close();
        this.child1.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.child1.rewind();
        this.child2.rewind();
        this.tupleList.clear();
        this.it=this.tupleList.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     * 每次fetchNext()都缓存child1中一行对child2扫描一遍的结果，如果只计算child1中一行对child2中逐行判断，找到一个符合条件的就返回，那么需要加一个局部变量记录外层循环child1的当前Tuple，很没有必要
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while (!it.hasNext() && child1.hasNext()){
            this.tupleList.clear();
            Tuple child1Tuple = child1.next();
            child2.rewind();
            while(child2.hasNext()){
                Tuple tuple=new Tuple(this.getTupleDesc());
                int pos=0;
                for (int i = 0; i < child1Tuple.getTupleDesc().numFields(); i++) {
                    tuple.setField(pos, child1Tuple.getField(i));
                    pos++;
                }
                Tuple child2Tuple = child2.next();
                if(!this.joinPredicate.filter(child1Tuple,child2Tuple)) continue;
                for (int i = 0; i < child2Tuple.getTupleDesc().numFields(); i++) {
                    tuple.setField(pos, child2Tuple.getField(i));
                    pos++;
                }
                this.tupleList.add(tuple);
            }
            this.it=this.tupleList.iterator();
        }
        if(!it.hasNext()) return null;
        return it.next();
    }

    @Override
    public OpIterator[] getChildren() {
        OpIterator[] opIterator = new OpIterator[]{this.child1,this.child2};
        return opIterator;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.child1=children[0];
        this.child2=children[1];
    }

}
